# -*- coding: utf-8 -*-
"""BoxOffice_Rev_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VUwxv4mHglbouKUpbm0_FWI0s5jIXzJZ
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
#import plotly.express as px
#import plotly.graph_objects as go 
import time
from datetime import datetime
import math
from statistics import median

# %matplotlib inline

import warnings
warnings.filterwarnings("ignore")

#Loading the dataset and looking at the data types in the dataset
movies = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Data/Mojo_budget_update.csv')
movies.info()

#Looking at the first 3 rows of the dataset
movies.head(3)

#Checking for duplicates
print('Number of duplicate Movie_ID: {}'.format(movies['movie_id'].duplicated().sum()))

# Checking for null values and their percentage
num_null_values = movies.isnull().sum()
print(num_null_values)
print('----------------------------')
percentage = num_null_values / len(movies)
print(percentage)

#Since there is very few null values for worldwide & distributor, then I will remove these rows and create a new dataframe

moviesNew = movies.dropna(subset=['worldwide', 'distributor'])
num_null_values = moviesNew.isnull().sum()
num_null_values

#Let us replace the NaN in the domestic and international with 0

moviesNew['domestic'] = moviesNew['domestic'].fillna(0)
moviesNew['international'] = moviesNew['international'].fillna(0)
num_null_values = moviesNew.isnull().sum()
num_null_values

#I will then replace the NaN in the mpaa with the most common PG-13

print(moviesNew['mpaa'].value_counts().head())        #Printing the MPAA counts before replacement
moviesNew['mpaa'] = moviesNew['mpaa'].fillna('PG-13')
print('----------------------------------')
print(moviesNew['mpaa'].value_counts().head())        #Printing the MPAA counts after replacement

# I can delete the following columns as they are irrelvant to my analysis
# writer, producer, composer, cinematographer & html

moviesNew.drop(['writer','producer','composer', 'cinematographer', 'html'], axis='columns', inplace=True)
moviesNew.head(3)

# Since there is only 3 missing names under main_actor_4, then I can fill them with 'No Actor'

moviesNew['main_actor_4'] = moviesNew['main_actor_4'].fillna('No Actor')
moviesNew[moviesNew['main_actor_4'] == 'No Actor']

#Renaming some columns to improve the readability of the dataset 

#pd.set_option('display.float_format', '${0:,.2f}'.format)
moviesNew = moviesNew.rename(columns={"domestic": "Domestic_Revenue", "international": "International_Revenue", "worldwide": "Worldwide_Revenue"})
moviesNew.head(3)

moviesNew.describe()

# Some findings:
# 1. The average Worldwide Revenue is $139,757,500
# 2. The highest Worldwide Revenue is $2,797,801,000
# 3. The average Budget is $46,396,300
# 4. The highest Budget is $356,000,000 
# 5. The movies in the dataset are between the year 1990 and 2020

cols = ['movie_id', 'title', 'year', 'Worldwide_Revenue']
lowestRev = moviesNew.sort_values('Worldwide_Revenue', ascending=True)[cols].set_index('movie_id')
lowestRev.head(10)

# 6. The lowest Worldwide Revenue is $30, which is very low, so let us investigate more and look at the lowest 10 Grossing movies

# Findings from the above table
# 1. The first movie title dosen't seem correct, so we can delete this record
# 2. After searching the 'www.the-numbers.com' for the rest of the above list:
#   a. The following movies doesn't exist: 'Redneck Carnage', 'Beat the Drum', 'High Strung from 1992', 'The Tunnel from 2011'
#   b. 'The Velocity of Gary' movie has an incorrect Worldwide Revenue
# 3. So to fix these problems, I choose to delete all records that has Worldwide Revenue less than $100,000

# Get indexes where Worldwide Revenue column is less than $100,000
indexRev = moviesNew[ moviesNew['Worldwide_Revenue'] < 100000 ].index

# Delete these row indexes from the dataframe

moviesNew.drop(indexRev, inplace=True)

cols = ['movie_id', 'title', 'year', 'Worldwide_Revenue', 'budget']
lowestRev = moviesNew.sort_values('Worldwide_Revenue', ascending=True)[cols].set_index('movie_id')
lowestRev.head(10)

moviesNew.describe(include='object')

# Some observations from the table below
# 1. MPAA: There are 5 different movies rating, with the most frequent one is PG-13
# 2. Ditributor: There are 157 different production companies, Warner Bros. is the top with 388 movies
# 3. Main Actor 1: Adam Sandler top the list with 27 movies
# 4. Main Actor 2: Samuel L. Jackson top this list with 15 movies
# 5. The most frequent Genres are 'Action' and 'Drama'

#Let us look at the Top 20 movies based on Worldwide Revenue with release year

cols = ['title', 'Worldwide_Revenue', 'year']
revenueData = moviesNew.sort_values('Worldwide_Revenue', ascending=False)[cols].set_index('title')
top_20_revenue = revenueData.head(20)

fig = px.bar(top_20_revenue, x=top_20_revenue.index, y='Worldwide_Revenue', text='year', title = 'Top 20 Revenue Movies', color = 'Worldwide_Revenue', height=700, width=1200, 
             labels={'Worldwide_Revenue':'Global Revenue in USD Billion',  'x':''})
fig.update_traces(textposition = 'outside')
fig.show()

# Avengers:Endgame which was released in 2019 recorded the highest Global Revenue in the last 30 years

#Let us look at the Top 20 movies based on Budget with year of release

cols = ['title', 'budget', 'year']
budgetData = moviesNew.sort_values('budget', ascending=False)[cols].set_index('title')
top_20_budget = budgetData.head(20)

fig = px.bar(top_20_budget, x=top_20_budget.index, y='budget', text='year', title = 'Top 20 Budget Movies', color = 'budget', height=700, width=1200, 
             labels={'budget':'Budget in USD Million', 'x':''})
fig.update_traces(textposition = 'outside')
fig.show()

# Avengers:Endgame which was released in 2019 had the highest production cost in the last 30 years

#Let us look at the Top 20 profitable movies

profitsValue = moviesNew['Worldwide_Revenue'] - moviesNew['budget']
profitsValue.name = 'profit'
profitsData = moviesNew.join(profitsValue)[['title', 'budget', 'Worldwide_Revenue', 'profit']].sort_values('profit', ascending=False)
top_20_profits = profitsData.head(20).set_index('title')

fig = go.Figure()
fig.add_trace(go.Bar(
    x=top_20_profits.index,
    y=profitsData.Worldwide_Revenue,
    name='Global Revenue',
    marker_color='orange'
))
fig.add_trace(go.Bar(
    x=top_20_profits.index,
    y=profitsData.budget,
    name='Budget',
    marker_color='blue'
))
fig.add_trace(go.Bar(
    x=top_20_profits.index,
    y=profitsData.profit,
    name='Profit',
    marker_color='purple'
))

fig.update_layout(
    title = 'Top 20 Profitable Movies'
    )
fig.show()

# Avatar recorded the highest profitable movie with over $2.5 USD Billion

#Let us check at the relationship between Revenue and Budget

plt.figure(figsize=(10,4))
plt.subplot(1,2,1)
sns.scatterplot(moviesNew['budget'], moviesNew['Worldwide_Revenue'])
plt.title('Revenue vs Budget');

#I will aslo check at the relationship using the log transformation to make the data look more normal
plt.subplot(1,2,2)
sns.scatterplot(np.log1p(moviesNew['budget']), np.log1p(moviesNew['Worldwide_Revenue']))
plt.title('Log Revenue vs Log Budget');

# Analysis of correlation
from scipy.stats import pearsonr

corr, _ = pearsonr(moviesNew['budget'], moviesNew['Worldwide_Revenue'])
print('Pearsons correlation between budget and Worldwide Revenue: %.3f' % corr)

corr, _ = pearsonr(np.log1p(moviesNew['budget']), np.log1p(moviesNew['Worldwide_Revenue']))
print('Pearsons correlation between log transformed budget and log transformed revenue: %.3f' % corr)

#We can see there is a strong positive correlation between Budget and Worldwide Revenue

#Checking the movies count per Genre

plt.figure(figsize=(14,6))
plt.subplot(1,2,1)
moviesNew['genre_1'].value_counts().plot(kind='bar', color='b');
plt.title('Movies count by Main Genre', size=16)
plt.xlabel('Genre', size=12)
plt.ylabel('Movie count', size=12);

plt.subplot(1,2,2)
moviesNew['genre_2'].value_counts().plot(kind='bar', color='y');
plt.title('Movies count by Secondary Genre', size=16)
plt.xlabel('Genre', size=12)
plt.ylabel('Movie count', size=12);

# Top movies released was for Genre 'Action', 'Comedy', 'Drama', and 'Adventure

#Looking at the (Genre 1 and Genre 2) and Revenue

fig, ax = plt.subplots(figsize=(10, 6))
ax.tick_params(axis='both', labelsize=10)
plt.title('Main Genre and Revenue', fontsize=14)
plt.xlabel('Worldwide Revenue', fontsize=12)
plt.ylabel('Main Genre', fontsize=12)
sns.boxplot(ax=ax, x=moviesNew.Worldwide_Revenue, y=moviesNew.genre_1, showfliers=False, orient='h')
plt.show();

fig, ax = plt.subplots(figsize=(10, 6))
ax.tick_params(axis='both', labelsize=10)
plt.title('Secondary Genre and Revenue', fontsize=14)
plt.xlabel('Worldwide Revenue', fontsize=12)
plt.ylabel('Secondary Genre', fontsize=16)
sns.boxplot(ax=ax, x=moviesNew.Worldwide_Revenue, y=moviesNew.genre_2, showfliers=False, orient='h')
plt.show();

#Main genres 'Family, Adventure & Animation' generated the highest worldwide revenue
#Secondary genres 'Animation, Adventure & Sci-Fi' generated the highest worldwide revenue

# Distributor Companies

distributorDict = {}
for elem in moviesNew["distributor"].values:
    #for dist in element:
    if elem not in distributorDict:
      distributorDict[elem] = 1
    else:
      distributorDict[elem] += 1

dist_df = pd.DataFrame.from_dict(distributorDict, orient='index', columns=["movies per company"])
dist_df.sort_values(by="movies per company", ascending=False).head(15).plot.bar(color='lightblue', figsize=(12,8))

dist_df.columns = ["num_of_movies"]

# 'Warner Bros.' has the highest number of movies produced.

# Analysis of Worlwide Revenue with Distributor

# Creating an index for Distributors
dist_df.index.values
for d in dist_df.index.values:
    moviesNew[d] = moviesNew['distributor'].apply(lambda x: 1 if d in x else 0)

# Average revenue per Distributor
for i, d in enumerate(dist_df.index.values):
    dist_df.loc[d, "avg_revenue"] = moviesNew[moviesNew[d]==1].Worldwide_Revenue.mean()

dist_df.sort_values(by=["num_of_movies", "avg_revenue"], ascending=False).head(10)

# Total revenue per Distributor
for i, d in enumerate(dist_df.index.values):
    dist_df.loc[d, "total_revenue"] = moviesNew[moviesNew[d]==1].Worldwide_Revenue.sum()

dist_df.sort_values(by=["num_of_movies", "total_revenue"], ascending=False).head(10)

# Distributors by Total Revenue

dist_df.sort_values(by=["total_revenue"], ascending=False).total_revenue.head(10).plot.bar(color='lightgreen', figsize=(12,8))
plt.title("Distributors by Total Revenue")
plt.ylabel("Revenue")
plt.xlabel("Distributor")

#'Walt Disney Studios' has the highest total revenue earner

#Let us check at the relationship between Revenue and Distributor

plt.figure(figsize=(10,4))
plt.subplot(1,2,1)
sns.scatterplot(dist_df['num_of_movies'], dist_df['total_revenue'])
plt.title('Revenue vs Distributor');

#I will aslo check at the relationship using the log transformation to make the data look more normal
plt.subplot(1,2,2)
sns.scatterplot(np.log1p(dist_df['num_of_movies']), np.log1p(dist_df['total_revenue']))
plt.title('Log Revenue vs Log Distributor');

# Analysis of correlation
from scipy.stats import pearsonr

corr, _ = pearsonr(dist_df['num_of_movies'], dist_df['total_revenue'])
print('Pearsons correlation between Distributor and Worldwide Revenue: %.2f' % corr)

corr, _ = pearsonr(np.log1p(dist_df['num_of_movies']), np.log1p(dist_df['total_revenue']))
print('Pearsons correlation between log transformed distributor and log transformed revenue: %.2f' % corr)

#There is a strong positive correlation between Distributor and Worldwide Revenue

# Main Actor

actorDict = {}
for elem in moviesNew["main_actor_1"].values:
    #for dist in element:
    if elem not in actorDict:
      actorDict[elem] = 1
    else:
      actorDict[elem] += 1

actor_df = pd.DataFrame.from_dict(actorDict, orient='index', columns=["movies per actor"])
actor_df.sort_values(by="movies per actor", ascending=False).head(20).plot.bar(color='lightgreen', figsize=(12,8))

actor_df.columns = ["num_of_movies"]

# The most popular actor based on the number of titles is Adam Sandler

# Analysis of Worlwide Revenue with Main Actor

# Creating an index for Actors
actor_df.index.values
for d in actor_df.index.values:
    moviesNew[d] = moviesNew['main_actor_1'].apply(lambda x: 1 if d in x else 0)

# Average revenue per Actor
for i, d in enumerate(actor_df.index.values):
    actor_df.loc[d, "avg_revenue"] = moviesNew[moviesNew[d]==1].Worldwide_Revenue.mean()

actor_df.sort_values(by=["num_of_movies", "avg_revenue"], ascending=False).head(10)

# Total revenue per Actor
for i, d in enumerate(actor_df.index.values):
    actor_df.loc[d, "total_revenue"] = moviesNew[moviesNew[d]==1].Worldwide_Revenue.sum()

actor_df.sort_values(by=["num_of_movies", "total_revenue"], ascending=False).head(10)

# Checking the top 20 Main Actor by Total Revenue

top_20_actor = actor_df.sort_values(by=["total_revenue"], ascending=False).head(20)
fig = px.bar(top_20_actor, x=top_20_actor.index, y='total_revenue', title = 'Top 20 Actors by Movies Revenue', color = 'total_revenue', height=700, width=900, 
             labels={'Worldwide_Revenue':'Global Revenue in USD Billion', 'x':''})
fig.show()

# The top Main Actor based on the total revenue earned is Robert Downey Jr. with a total of $9,206,893,682

#Let us check the relationship between Revenue and Main Actor

plt.figure(figsize=(10,4))
plt.subplot(1,2,1)
sns.scatterplot(actor_df['num_of_movies'], actor_df['total_revenue'])
plt.xlabel('Number of movies per Actor', size=10)
plt.ylabel('Total Revenue', size=10);
plt.title('Revenue vs Main Actor');

#I will aslo check at the relationship using the log transformation to make the data look more normal
plt.subplot(1,2,2)
sns.scatterplot(np.log1p(actor_df['num_of_movies']), np.log1p(actor_df['total_revenue']))
plt.xlabel('Number of movies per Actor', size=10)
plt.ylabel('Total Revenue', size=10);
plt.title('Log Revenue vs Log Main Actor');

#analysis of correlation and create log feature probably

corr, _ = pearsonr(actor_df['num_of_movies'], actor_df['total_revenue'])
print('Pearsons correlation between Main Actor and Worldwide Revenue: %.2f' % corr)

corr, _ = pearsonr(np.log1p(actor_df['num_of_movies']), np.log1p(actor_df['total_revenue']))
print('Pearsons correlation between log transformed Main Actor and log transformed revenue: %.2f' % corr)

# There is a strong correlation between Main Actor and Worldwide Revenue

# Director

directorDict = {}
for elem in moviesNew["director"].values:
    #for dist in element:
    if elem not in directorDict:
      directorDict[elem] = 1
    else:
      directorDict[elem] += 1

director_df = pd.DataFrame.from_dict(directorDict, orient='index', columns=["movies per director"])
director_df.sort_values(by="movies per director", ascending=False).head(20).plot.bar(color='lightblue', figsize=(12,8))

director_df.columns = ["num_of_movies"]

# The most popular director based on the number of titles is Clint Eastwood

# Analysis of Worlwide Revenue with Director

# Creating an index for Directors
director_df.index.values
for d in director_df.index.values:
    moviesNew[d] = moviesNew['director'].apply(lambda x: 1 if d in x else 0)

# Average revenue per Director
for i, d in enumerate(director_df.index.values):
    director_df.loc[d, "avg_revenue"] = moviesNew[moviesNew[d]==1].Worldwide_Revenue.mean()

director_df.sort_values(by=["num_of_movies", "avg_revenue"], ascending=False).head(10)

# Total revenue per Director
for i, d in enumerate(director_df.index.values):
    director_df.loc[d, "total_revenue"] = moviesNew[moviesNew[d]==1].Worldwide_Revenue.sum()

director_df.sort_values(by=["num_of_movies", "total_revenue"], ascending=False).head(10)

# Checking the top 20 Director by Total Revenue

top_20_director = director_df.sort_values(by=["total_revenue"], ascending=False).head(20)
fig = px.bar(top_20_director, x=top_20_director.index, y='total_revenue', title = 'Top 20 Directors by Movies Revenue', color = 'total_revenue', height=700, width=900, 
             labels={'Worldwide_Revenue':'Global Revenue in USD Billion', 'x':''})
fig.show()

# The top Director based on the total revenue earned is Steven Spiellberg with a total of $7,067,663,962

#Let us check at the relationship between Revenue and Director

plt.figure(figsize=(10,4))
plt.subplot(1,2,1)
sns.scatterplot(director_df['num_of_movies'], director_df['total_revenue'])
plt.xlabel('Number of movies per Director', size=10)
plt.ylabel('Total Revenue', size=10);
plt.title('Revenue vs Director');

#I will aslo check at the relationship using the log transformation to make the data look more normal
plt.subplot(1,2,2)
sns.scatterplot(np.log1p(director_df['num_of_movies']), np.log1p(director_df['total_revenue']))
plt.xlabel('Number of movies per Director', size=10)
plt.ylabel('Total Revenue', size=10);
plt.title('Log Revenue vs Log Director');

# Analysis of correlation

corr, _ = pearsonr(director_df['num_of_movies'], director_df['total_revenue'])
print('Pearsons correlation between Director and Worldwide Revenue: %.2f' % corr)

corr, _ = pearsonr(np.log1p(director_df['num_of_movies']), np.log1p(director_df['total_revenue']))
print('Pearsons correlation between log transformed Director and log transformed revenue: %.2f' % corr)

#There is a strong positive correlation between Director and Worldwide Revenue